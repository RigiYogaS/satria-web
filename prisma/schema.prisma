generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id_user        Int        @id @default(autoincrement())
  nama           String
  email          String     @unique
  password       String
  jabatan        String?
  divisi_id      Int
  pangkat        String?
  otp_code       String?
  otp_expires_at DateTime?
  created_at     DateTime   @default(now())
  updated_at     DateTime   @default(now())
  role           Role
  status         UserStatus @default(PENDING)
  absensi        Absensi[]
  cuti           Cuti[]
  laporan        Laporan[]
  divisi         Divisi     @relation(fields: [divisi_id], references: [id_divisi])

  @@map("users")
}

model Absensi {
  id_absensi      Int              @id @default(autoincrement())
  user_id         Int   
  tanggal         DateTime         @db.Date
  waktu           DateTime         @default(now())
  ip_address      String?
  keterangan      String?
  created_at      DateTime         @default(now())
  status          AbsensiStatus    @default(Hadir)
  latitude        Decimal?
  longitude       Decimal?
  accuracy        Decimal?
  lokasi          String?          
  jam_checkout    DateTime?        
  laporan_harian  String?          
  checkin_status  CheckinStatus?   // ubah jadi enum
  checkout_status CheckoutStatus?  // ubah jadi enum
  user            Users            @relation(fields: [user_id], references: [id_user], onDelete: Cascade)

  @@map("absensi")
}

model Cuti {
  id_cuti           Int        @id @default(autoincrement())
  user_id           Int
  alasan            String     @db.VarChar(50)
  bukti_file        String?
  keterangan        String?
  lebih_dari_sehari Boolean?
  tgl_mulai         DateTime   @db.Date
  tgl_selesai       DateTime   @db.Date
  created_at        DateTime   @default(now())
  status            CutiStatus @default(pending)
  user              Users      @relation(fields: [user_id], references: [id_user], onDelete: Cascade)

  @@map("cuti")
}

model Laporan {
  id_laporan     Int      @id @default(autoincrement())
  user_id        Int
  judul          String
  file_path      String
  tanggal_upload DateTime @default(now())
  nilai_admin    String?
  created_at     DateTime @default(now())
  user           Users    @relation(fields: [user_id], references: [id_user], onDelete: Cascade)

  @@map("laporan")
}

model IpLokasi {
  id         Int      @id @default(autoincrement())
  ip         String   @unique
  nama_wifi  String
  created_at DateTime @default(now())

  @@map("ip_lokasi")
}

model Divisi {
  id_divisi   Int      @id @default(autoincrement())
  nama_divisi String   @unique
  created_at  DateTime @default(now())
  users       Users[]

  @@map("divisi")
}

enum AbsensiStatus {
  Hadir
}

enum CutiStatus {
  pending
  disetujui
  ditolak
}

enum Role {
  pegawai
  admin
}

enum UserStatus {
  PENDING
  ACTIVE
  INACTIVE
}

enum CheckinStatus {
  tepat_waktu
  telat
}

enum CheckoutStatus {
  normal
  lembur
  setengah_hari
}

