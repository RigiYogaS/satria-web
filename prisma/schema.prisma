// schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Users {
  id_user        Int       @id @default(autoincrement())
  nama           String
  email          String    @unique
  password       String
  jabatan        String?
  divisi_id      Int
  role           String    @default("pegawai")
  status         String    @default("PENDING")
  otp_code       String?
  otp_expires_at DateTime?
  created_at     DateTime  @default(now())
  updated_at     DateTime  @default(now())

  // Relations
  absensi     Absensi[]
  cuti        Cuti[]
  laporan     Laporan[]
  divisi      Divisi    @relation(fields: [divisi_id], references: [id_divisi])

  @@map("users")
}

model Absensi {
  id_absensi Int      @id @default(autoincrement())
  user_id    Int
  tanggal    DateTime @db.Date
  waktu      DateTime @default(now())
  lokasi     String?
  ip_address String?
  status     String
  keterangan String?
  created_at DateTime  @default(now())

  // Relations
  user Users @relation(fields: [user_id], references: [id_user], onDelete: Cascade)

  @@map("absensi")
}

model Cuti {
  id_cuti           Int      @id @default(autoincrement())
  user_id           Int
  alasan            String   @db.VarChar(50)
  bukti_file        String?
  keterangan        String?
  lebih_dari_sehari Boolean?
  tgl_mulai         DateTime @db.Date
  tgl_selesai       DateTime @db.Date
  status            String   @default("pending")
  created_at        DateTime @default(now())

  // Relations
  user Users @relation(fields: [user_id], references: [id_user], onDelete: Cascade)

  @@map("cuti")
}

model Laporan {
  id_laporan     Int      @id @default(autoincrement())
  user_id        Int
  judul          String
  file_path      String
  tanggal_upload DateTime @default(now())
  nilai_admin    String?
  created_at     DateTime @default(now())

  // Relations
  user Users @relation(fields: [user_id], references: [id_user], onDelete: Cascade)

  @@map("laporan")
}

model Ip_lokasi {
  id         Int      @id @default(autoincrement())
  ip         String   @unique
  lokasi     String
  created_at DateTime @default(now())

  @@map("ip_lokasi")
}

model Divisi {
  id_divisi   Int     @id @default(autoincrement())
  nama_divisi String  @unique
  created_at  DateTime @default(now())

  users Users[]

  @@map("divisi")
}

// Note: Using String fields with validation in application layer
// instead of database enums to match existing database schema
